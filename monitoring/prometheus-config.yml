apiVersion: v1
kind: ConfigMap
metadata:
 name: prometheus-config
 namespace: monitoring
data:
 prometheus.yml: |
  global:
  scrape_configs:
   - job_name: 'kubernetes-kubelet'
     scheme: https
     tls_config:
       ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
       insecure_skip_verify: true
     bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
     kubernetes_sd_configs:
     - role: node
     relabel_configs:
     - action: labelmap
       regex: __meta_kubernetes_node_label_(.+)
     - target_label: __address__
       replacement: kubernetes.default.svc.cluster.local:443
     - source_labels: [__meta_kubernetes_node_name]
       regex: (.+)
       target_label: __metrics_path__
       replacement: /api/v1/nodes/${1}/proxy/metrics
   - job_name: 'kubernetes-kube-state'
     kubernetes_sd_configs:
     - role: pod
     relabel_configs:
     - action: labelmap
       regex: __meta_kubernetes_pod_label_(.+)
     - source_labels: [__meta_kubernetes_namespace]
       action: replace
       target_label: kubernetes_namespace
     - source_labels: [__meta_kubernetes_pod_name]
       action: replace
       target_label: kubernetes_pod_name
     - source_labels: [__meta_kubernetes_pod_label_grafanak8sapp]
       regex: .*true.*
       action: keep
     - source_labels: ['__meta_kubernetes_pod_label_daemon', '__meta_kubernetes_pod_node_name']
       regex: 'node-exporter;(.*)'
       action: replace
       target_label: nodename
   - job_name: 'kubernetes-nodes-cadvisor'
     scrape_interval: 10s
     scrape_timeout: 10s
     scheme: https  # remove if you want to scrape metrics on insecure port
     tls_config:
       ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
     bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
     kubernetes_sd_configs:
       - role: node
     relabel_configs:
       - action: labelmap
         regex: __meta_kubernetes_node_label_(.+)
       # Only for Kubernetes ^1.7.3.
       # See: https://github.com/prometheus/prometheus/issues/2916
       - target_label: __address__
         replacement: kubernetes.default.svc:443
       - source_labels: [__meta_kubernetes_node_name]
         regex: (.+)
         target_label: __metrics_path__
         replacement: /api/v1/nodes/${1}/proxy/metrics/cadvisor
     metric_relabel_configs:
       - action: replace
         source_labels: [id]
         regex: '^/machine\.slice/machine-rkt\\x2d([^\\]+)\\.+/([^/]+)\.service$'
         target_label: rkt_container_name
         replacement: '${2}-${1}'
       - action: replace
         source_labels: [id]
         regex: '^/system\.slice/(.+)\.service$'
         target_label: systemd_service_name
         replacement: '${1}'
   - job_name: 'kubernetes-pods'
     scrape_interval: 1m
     scrape_timeout: 10s
     metrics_path: /metrics
     scheme: http
     kubernetes_sd_configs:
     - api_server: null
       role: pod
       namespaces:
         names: []
     relabel_configs:
     - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
       separator: ;
       regex: "true"
       replacement: $1
       action: keep
     - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
       separator: ;
       regex: (.+)
       target_label: __metrics_path__
       replacement: $1
       action: replace
     - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
       separator: ;
       regex: ([^:]+)(?::\d+)?;(\d+)
       target_label: __address__
       replacement: $1:$2
       action: replace
     - separator: ;
       regex: __meta_kubernetes_pod_label_(.+)
       replacement: $1
       action: labelmap
     - source_labels: [__meta_kubernetes_namespace]
       separator: ;
       regex: (.*)
       target_label: namespace
       replacement: $1
       action: replace
     - source_labels: [__meta_kubernetes_pod_name]
       separator: ;
       regex: (.*)
       target_label: kubernetes_pod_name
       replacement: $1
       action: replace
