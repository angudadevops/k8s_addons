kind: Namespace
apiVersion: v1
metadata:
  name: monitoring
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus
  namespace: monitoring
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: prometheus
rules:
- apiGroups: [""]
  resources:
  - nodes
  - nodes/proxy
  - services
  - endpoints
  - pods
  verbs: ["get", "list", "watch"]
- apiGroups:
  - extensions
  resources:
  - ingresses
  verbs: ["get", "list", "watch"]
- nonResourceURLs: ["/metrics"]
  verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus
subjects:
- kind: ServiceAccount
  name: prometheus
  namespace: monitoring
---
apiVersion: v1
kind: ConfigMap
metadata:
 name: prometheus-config
 namespace: monitoring
data:
 prometheus.yml: |
  global:
  scrape_configs:
   - job_name: 'kubernetes-kubelet'
     scheme: https
     tls_config:
       ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
       insecure_skip_verify: true
     bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
     kubernetes_sd_configs:
     - role: node
     relabel_configs:
     - action: labelmap
       regex: __meta_kubernetes_node_label_(.+)
     - target_label: __address__
       replacement: kubernetes.default.svc.cluster.local:443
     - source_labels: [__meta_kubernetes_node_name]
       regex: (.+)
       target_label: __metrics_path__
       replacement: /api/v1/nodes/${1}/proxy/metrics
   - job_name: 'kubernetes-kube-state'
     kubernetes_sd_configs:
     - role: pod
     relabel_configs:
     - action: labelmap
       regex: __meta_kubernetes_pod_label_(.+)
     - source_labels: [__meta_kubernetes_namespace]
       action: replace
       target_label: kubernetes_namespace
     - source_labels: [__meta_kubernetes_pod_name]
       action: replace
       target_label: kubernetes_pod_name
     - source_labels: [__meta_kubernetes_pod_label_grafanak8sapp]
       regex: .*true.*
       action: keep
     - source_labels: ['__meta_kubernetes_pod_label_daemon', '__meta_kubernetes_pod_node_name']
       regex: 'node-exporter;(.*)'
       action: replace
       target_label: nodename
   - job_name: 'kubernetes-nodes-cadvisor'
     scrape_interval: 10s
     scrape_timeout: 10s
     scheme: https  # remove if you want to scrape metrics on insecure port
     tls_config:
       ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
     bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
     kubernetes_sd_configs:
       - role: node
     relabel_configs:
       - action: labelmap
         regex: __meta_kubernetes_node_label_(.+)
       # Only for Kubernetes ^1.7.3.
       # See: https://github.com/prometheus/prometheus/issues/2916
       - target_label: __address__
         replacement: kubernetes.default.svc:443
       - source_labels: [__meta_kubernetes_node_name]
         regex: (.+)
         target_label: __metrics_path__
         replacement: /api/v1/nodes/${1}/proxy/metrics/cadvisor
     metric_relabel_configs:
       - action: replace
         source_labels: [id]
         regex: '^/machine\.slice/machine-rkt\\x2d([^\\]+)\\.+/([^/]+)\.service$'
         target_label: rkt_container_name
         replacement: '${2}-${1}'
       - action: replace
         source_labels: [id]
         regex: '^/system\.slice/(.+)\.service$'
         target_label: systemd_service_name
         replacement: '${1}'
   - job_name: 'kubernetes-pods'
     scrape_interval: 1m
     scrape_timeout: 10s
     metrics_path: /metrics
     scheme: http
     kubernetes_sd_configs:
     - api_server: null
       role: pod
       namespaces:
         names: []
     relabel_configs:
     - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
       separator: ;
       regex: "true"
       replacement: $1
       action: keep
     - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
       separator: ;
       regex: (.+)
       target_label: __metrics_path__
       replacement: $1
       action: replace
     - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
       separator: ;
       regex: ([^:]+)(?::\d+)?;(\d+)
       target_label: __address__
       replacement: $1:$2
       action: replace
     - separator: ;
       regex: __meta_kubernetes_pod_label_(.+)
       replacement: $1
       action: labelmap
     - source_labels: [__meta_kubernetes_namespace]
       separator: ;
       regex: (.*)
       target_label: namespace
       replacement: $1
       action: replace
     - source_labels: [__meta_kubernetes_pod_name]
       separator: ;
       regex: (.*)
       target_label: kubernetes_pod_name
       replacement: $1
       action: replace
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
 labels:
  name: prometheus
 name: prometheus
 namespace: monitoring
spec:
  replicas: 1
  template:
   metadata:
    labels:
      app: prometheus-server
   spec:
    serviceAccountName: prometheus
    containers:
    - name: prometheus
      image: prom/prometheus:v2.1.0
      imagePullPolicy: Always
      ports:
        - containerPort: 9090
          protocol: TCP
      volumeMounts:
        - mountPath: "/etc/prometheus"
          name: config-prometheus
    volumes:
    - name: config-prometheus
      configMap:
       name: prometheus-config
---
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: monitoring
spec:
  type: ClusterIP
  ports:
  - port: 9090
    targetPort: 9090
  selector:
    app: prometheus-server
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: grafana
  namespace: monitoring
spec:
  replicas: 1
  template:
    metadata:
      labels:
        k8s-app: grafana
    spec:
      containers:
      - name: grafana
        image: grafana/grafana
        ports:
        - containerPort: 3000
          protocol: TCP
        volumeMounts:
        - mountPath: /var/lib/grafana
          name: grafana-storage
        env:
        - name: GF_SERVER_HTTP_PORT
          value: "3000"
        - name: GF_SECURITY_ADMIN_PASSWORD
          value: "helloworld"
        - name: GF_INSTALL_PLUGINS
          value: "grafana-kubernetes-app"
      volumes:
      - name: grafana-storage
        emptyDir: {} 
---
apiVersion: v1
kind: Service
metadata:
  namespace: monitoring
  name: grafana-svc
  labels:
    k8s-app: grafana
spec:
  selector:
    k8s-app: grafana
  ports:
  - name: http
    nodePort: 31114
    port: 3000
  type: NodePort
---
kind: DaemonSet
apiVersion: extensions/v1beta1
metadata: 
  name: node-exporter
  namespace: monitoring
spec: 
  selector: 
    matchLabels: 
      daemon: node-exporter
      grafanak8sapp: "true"
  template: 
    metadata: 
      name: node-exporter
      labels: 
        daemon: node-exporter
        grafanak8sapp: "true"
    spec: 
      volumes: 
      - name: proc
        hostPath: 
          path: /proc
      - name: sys
        hostPath: 
          path: /sys
      containers: 
      - name: node-exporter
        image: quay.io/prometheus/node-exporter:v0.15.0
        args: 
          - --path.procfs=/proc_host
          - --path.sysfs=/host_sys
        ports: 
          - name: node-exporter
            hostPort: 9100
            containerPort: 9100
        volumeMounts: 
          - name: sys
            readOnly: true
            mountPath: /host_sys
          - name: proc
            readOnly: true
            mountPath: /proc_host
        imagePullPolicy: IfNotPresent
      restartPolicy: Always
      hostNetwork: true
      hostPID: true
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kube-state-metrics
  namespace: monitoring
---

apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: monitoring
  name: kube-state-metrics
rules:
- apiGroups: [""]
  resources:
  - pods
  verbs: ["get"]
- apiGroups: ["extensions"]
  resources:
  - deployments
  resourceNames: ["kube-state-metrics"]
  verbs: ["get", "update"]
---

apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: kube-state-metrics
  namespace: monitoring
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: kube-state-metrics
subjects:
- kind: ServiceAccount
  name: kube-state-metrics
  namespace: monitoring
---

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kube-state-metrics
  namespace: monitoring
rules:
- apiGroups: [""]
  resources:
  - nodes
  - pods
  - services
  - resourcequotas
  - replicationcontrollers
  - limitranges
  - persistentvolumeclaims
  - persistentvolumes
  - namespaces
  - endpoints
  verbs: ["list", "watch"]
- apiGroups: ["extensions"]
  resources:
  - daemonsets
  - deployments
  - replicasets
  verbs: ["list", "watch"]
- apiGroups: ["apps"]
  resources:
  - statefulsets
  verbs: ["list", "watch"]
- apiGroups: ["batch"]
  resources:
  - cronjobs
  - jobs
  verbs: ["list", "watch"]
- apiGroups: ["autoscaling"]
  resources:
  - horizontalpodautoscalers
  verbs: ["list", "watch"]
- apiGroups: ["policy"]
  resources:
  - poddisruptionbudgets
  verbs: ["list", "watch"]
---

apiVersion: rbac.authorization.k8s.io/v1 
kind: ClusterRoleBinding
metadata:
  name: kube-state-metrics
  namespace: monitoring
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kube-state-metrics
subjects:
- kind: ServiceAccount
  name: kube-state-metrics
  namespace: monitoring
---
apiVersion: apps/v1beta1
kind: Deployment
metadata: 
  name: kube-state-metrics
  namespace: monitoring
spec: 
  selector: 
    matchLabels: 
      k8s-app: kube-state-metrics 
      grafanak8sapp: "true" 
  replicas: 1
  template: 
    metadata: 
      labels: 
        k8s-app: kube-state-metrics 
        grafanak8sapp: "true"
    spec: 
      serviceAccountName: kube-state-metrics
      containers: 
      - name: kube-state-metrics
        image: quay.io/coreos/kube-state-metrics:v1.1.0
        ports: 
        - name: http-metrics
          containerPort: 8080
        readinessProbe: 
          httpGet: 
            path: /healthz
            port: 8080
          initialDelaySeconds: 5
          timeoutSeconds: 5  
